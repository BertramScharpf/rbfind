#!/usr/bin/ruby

#
#  rbfind  --  Ruby Find with many features
#

require "rbfind"
require "rbfind/humansiz"
require "English"
require 'getoptlong'


module RbFind

  class Application

    PROGRAM = <<~EOT
      rbfind #{RbFind::VERSION}  --  A find tool using Ruby

        Author: Bertram Scharpf <software@bertram-scharpf.de>
        License: BSD
    EOT

    OPTIONS = [
      #    options          arg   description
      [ %w(--help      -h), nil,  "print this help"],
      [ %w(--examples  -X), nil,  "print this help and examples"],
      [ %w(--version   -V), nil,  "print version information"],
      [ %w(--verbose   -v), nil,  "standard Ruby error reports"],
      [ %w(--show      -o), nil,  "just show Ruby block built from options"],
      [ %w(--bw        -w), nil,  "black and white on -p or default output"],
      [ %w(--colored   -c), nil,  "force color on -p or default output"],
      [ %w(--depth     -d), nil,  "yield directory after its contents"],
      [ %w(--maxdepth  -m), :num, "maxium step depth"],
      [ %w(--follow    -y), nil,  "follow symbolic links"],
      [ %w(--nosort    -S), nil,  "unsorted"],
      [ %w(--sort-by   -s), :str, "sort expression"],
      [ %w(--reverse   -R), nil,  "reverse the sort"],
      [ %w(--require   -r), :rb,  "require library"],
      [ %w(--puts-path -p), nil,  "do 'puts path/cpath' on true block"],
      [ %w(--ls-l      -P), nil,  "do 'ls -l' style output on true block"],
      [ %w(--long      -Q), nil,  "alternate long format on true block"],
      [ %w(--wider     -+), nil,  "widen fields in long output format"],
      [ %w(--slash     -/), nil,  "append a slash to directory names"],
      [ %w(--lines     -l), :blk, "surround block by 'lines { |$_,$.| ... }'"],
      [ %w(--reallines -L), :blk, "same as -l but stop at any null character"],
      [ %w(--grep      -g), :blk, "grep files (implies -pL)"],
      [ %w(--igrep     -G), :blk, "case insensitive grep"],
      [ %w(--binary    -b), nil,  "grep even binary files"],
      [ %w(--no-vcs    -C), nil,  "prune version control dirs (CVS/.svn/.git)"],
      [ %w(--no-swap   -W), nil,  "ignore Vim swapfiles"],
      [ %w(--skip      -k), :rgx, "filenames to skip"],
      [ %w(--demand    -D), :rgx, "skip all filenames but these"],
      [ %w(--ext       -e), :lst, "skip all filename extensions but these"],
      [ %w(--visible   -I), nil,  "skip all hidden (starting with .dot)"],
      [ %w(--nodirs    -N), nil,  "skip directories"],
      [ %w(--begin     -B), :blk, "eval block before begin"],
      [ %w(--end       -E), :blk, "eval block after end"],
      [ %w(--file      -f), :nam, "read block expression from file"],
      [ %w(--encoding  -K), :str, "encoding extern[:intern] (same as ruby -E)"],
    ]

    def initialize
      @params = {}
      envopts = ENV[ "RBFIND_OPTIONS"]
      $*.unshift *envopts.split if envopts
      opts = GetoptLong.new *OPTIONS.map { |(long,short),arg,|
        [long,short,(arg ? GetoptLong::REQUIRED_ARGUMENT : GetoptLong::NO_ARGUMENT)]
      }
      opts.ordering = GetoptLong::PERMUTE
      opts.quiet = true
      opts.each do |opt,arg|
        case opt
          when '--help'      then usage          ; exit
          when '--version'   then puts PROGRAM   ; exit
          when '--examples'  then usage_examples ; exit
          when '--verbose'   then @verbose = true
          when '--show'      then @show = true
          when '--bw'        then @color = false
          when '--colored'   then @color = true
          when '--depth'     then @params[ :depth_first] = true
          when '--maxdepth'  then @params[ :max_depth] = arg.to_i
          when '--follow'    then @params[ :follow] = true
          when '--nosort'    then @params[ :sort] = false
          when '--sort-by'   then @params[ :sort] = instance_eval "proc { |n| #{arg} }"
          when '--reverse'   then @params[ :reverse] = true
          when '--require'   then require arg
          when '--puts-path' then @puts = true
          when '--ls-l'      then @puts = :ls  ; @wds = 6 ; @wd = 6
          when '--long'      then @puts = :alt ; @wds = 7 ; @wd = 4
          when '--wider'     then @wd and @wd += 2.succ ; @wds and @wds += @ptus == :alt ? 4 : 3
          when '--slash'     then @slash = true
          when '--lines'     then @lines = :plain ;                 @block = arg
          when '--reallines' then @lines = :plain ; @real = true ;  @block = arg
          when '--grep'      then @lines = :grep  ;                 @block = arg
          when '--igrep'     then @lines = :grep  ; @icase = true ; @block = arg
          when '--binary'    then @binary = true
          when '--no-vcs'    then @vcs = true
          when '--no-swap'   then @vim = true
          when '--skip'      then @skip = arg
          when '--demand'    then @demand = arg
          when '--ext'       then @ext = arg
          when '--visible'   then @visible = true
          when '--nodirs'    then @nodirs = true
          when '--begin'     then @blkbegin = arg
          when '--end'       then @blkend   = arg
          when '--file'      then @block = File.read arg
          when '--encoding'  then e, i = arg.split ":" ; set_encoding e, i
        end
      end
      @args = $*.dup
      if @args.empty? and not $stdin.tty? then
        $stdin.each_line { |l|
          l.chomp!
          @args.push l
        }
      end
      build_block
    rescue GetoptLong::InvalidOption
      $stderr.puts $!
      $stderr.puts
      usage
      exit 9
    rescue
      $stderr.puts $!
      exit 8
    end

    def build_block
      co = color_on $stdout
      opath = co ? "cpath" : "path"
      @slash and opath << "!"
      case @lines
        when :plain then
          @puts and @block = "( #@block ) and colsep #{opath}, num, line"
          @real and @block = "break if ~/\0/o ; #@block"
          @block = "lines { |line,num| #@block }"

        when :grep then
          re = Regexp.new @block, @icase && Regexp::IGNORECASE
          @block = "grep %r#{re.inspect}"
          @block << ", true" if co
          @block << " ; $stdout.flush" unless $stdout.tty?
          @binary or @block = "not binary? and (#@block)"

        else
          @block ||= if @args.last and not (File.lstat @args.last rescue false) then
            @args.pop.dup
          else
            @puts ||= true
            "true"
          end
          if @puts then
            @block = "( #@block ) and "
            @block << case @puts
              when :alt then
                "spcsep stype+modes, user!.w#@wd, group!.w#@wd, size.w_#@wds, " +
                  "mtime.long,  #{opath} + #{co ? 'carrow' : 'arrow'}.to_s"
              when :ls then
                "spcsep stype+modes, user.w#@wd,  group.w#@wd,  size.w#@wds, " +
                  "mtime.lsish, #{opath} + #{co ? 'carrow' : 'arrow'}.to_s"
              else
                "puts #{opath}"
            end
          end

      end

      osic = File::ALT_SEPARATOR&&Regexp::IGNORECASE
      if @skip then
        re = Regexp.new @skip, osic
        @block.insert 0, "done if name =~ #{re.inspect} ; "
      end

      if @demand then
        re = Regexp.new @demand, osic
        @block.insert 0, "done unless name =~ #{re.inspect} ; "
      end

      if @ext then
        re = Regexp.new '\A\.(' +
          @ext.split(/ +|,/).map { |e| e[ /\A\.?(.*)\z/, 1] }.join('|') +
          ')\z', osic
        @block.insert 0, "ext =~ #{re.inspect} or done ; "
      end

      @visible and @block.insert 0, "visible? or done ; "

      @nodirs and @block.insert 0, "done if dir? ; "

      @vcs and @block.insert 0, "no_vcs ; "
      @vim and @block.insert 0, "vimswap? and done ; "

      @params[ :error] = proc do
        case $!
          when Errno::EPIPE         then raise
          when NameError, TypeError then raise
          when ArgumentError        then raise
          else                           show_error $!
        end
      end
    end

    def run
      if @show then
        show
      else
        execute
      end
    end

    private

    def usage
      puts <<~EOT
        Usage:

          rbfind [options] path... 'block'

      EOT
      OPTIONS.each { |(long,short),arg,desc|
        puts "    %-12s %2s  %-5s  %s" % [long,short,arg.to_s.upcase,desc]
      }
      puts <<~'EOT'

        "--" stops option processing.

        The last argument is a block that will be executed on every found
        file object. It may be omitted; then "puts path" is assumed or "cpath"
        in case the output is a terminal.

        Default sort order is alphabetical.
      EOT
    end

    def usage_examples
      usage
      puts <<~'EOT'
      Examples:
        $ rbfind -p 'file and age < 5.m'
        $ rbfind -p 'file and age > 1.d'
        $ rbfind -p '(90.d .. 183.d) === age'

        $ rbfind -Cg require
        $ rbfind -Cp
        $ rbfind 'filesize < 100.kB and grep /require/'
        $ rbfind -g 'define\s*ALLOC_N'
        $ rbfind myproject -e rb -l '~/require/ and puts $_'

        $ rbfind -pe '.rb c h'
        $ rbfind /usr/include -e .h -g EACCES
        $ rbfind -d -m3 -- /mnt/data
        $ rbfind 'filesize > 10.MiB and colsep size.to_hib, path'

        $ rbfind -S "name =~ /^\.*/ ; $'.downcase"
        $ rbfind -B '$s=0' -E 'puts $s.to_h' 'filesize {|s|$s+=s}'
        $ rbfind 'puts path if ext == ".rb"'
        $ rbfind -p 'ext == ".rb"'
        $ rbfind /usr/include -p -D '\.h$' -l '~/EACCES/'
        $ rbfind /usr/include -pD 'pg|pq|postgres' dir
        $ rbfind 'no_svn ; puts path'
        $ rbfind 'prune if name == ".svn" ; puts path'
        $ rbfind -p 'prune if name == ".svn"'
        $ rbfind myproject 'name[/\.rb$/] and lines { |l,i| l=~/require/ and puts l }'
        # rbfind /etc 'lines { |l,| l["192.168."] and (puts path ; break) }'
        $ rbfind /etc 'readable? or raise "Access denied: #{path}" ;
        >              lines { |l,| l["192.168."] and (puts path ; break) }'

        $ rbfind 'col_sep stype+modes, size.w10, path'
        $ rbfind 'tab_sep stype+modes, size.w10, path'
        $ rbfind 'spc_sep stype+modes, size.to_h, user, group, mtime.lsish, path'
        $ rbfind 'p stype+modes, size.to_h, user, group, mtime.lsish, path'
        $ rbfind 'p stype+modes, size.to_h, user, group, mtime!, path'
        $ rbfind 'p stype+modes, size.to_h, user, group, mtime.i, path'
        $ rbfind 'p mtime.u, path'
        $ rbfind 'p modes, user.w8, group.w8, size.w8, cpath + carrow.to_s'

        $ rbfind 'p digest_md5, size.w8, path'
        $ rbfind 'p digest_sha256, size.w8, path'

        $ rbfind 'rename name.downcase'
        $ rbfind 'ext == ".tgz" and rename without_ext+".tar.gz"'

        See the RbFind documentation or the "rbfind.rb" source file for more
        sophisticated examples and for a full list of file examination methods.

        Valid units are 1.s, 1.m, 1.h, 1.d, 1.w for time values and
        1.kB == 1000, 1.kiB == 1024, 1.MB, 1.MiB for file sizes.
      EOT
    end

    def set_encoding extern, intern = nil
      Encoding.default_external = extern if extern and not extern.empty?
      Encoding.default_internal = intern if intern and not intern.empty?
      [ $stdin, $stdout, $stderr].each do |io|
        io.set_encoding extern, intern
      end
    end

    def color_on stream
      @color.nil? ? !File::ALT_SEPARATOR && stream.tty? : @color
    end


    def show_error e
      co = color_on $stderr
      $stderr.puts co ? "\e[31m#{e.class}: \e[1m#{e}\e[m" : "#{e.class}: #{e}"
    end

    def error_handle
      if @verbose then
        yield
      else
        begin
          yield
        rescue ArgumentError
          show_error $!
          if $!.message[ "invalid byte sequence"] then
            $stderr.puts <<~EOT
              Hint: Try to give a different default encoding by explicitly setting one or
              by changing the locale.

                $ rbfind -K ascii-8bit ...
                $ LC_ALL="C" rbfind ...

              Alternatively, you may prefer to scrub the invalid encodings yourself.

                $ rbfind -P 'name.scrub =~ /Fu.ball/'

            EOT
          end
          exit 1
        rescue
          show_error $!
          exit 1
        rescue NoMemoryError, ScriptError, SignalException
          show_error $!
          exit 2
        end
      end
    end

    def execute
      error_handle do
        eval @blkbegin if @blkbegin
        b = @block
        Walk.run *@args, **@params do instance_eval b end
        eval @blkend   if @blkend
      end
    end

    def show
      puts "arguments:"
      @args.each { |a| puts_val a }.any?              or puts_val "(none)"
      puts "parameters:"
      @params.each { |k,v| puts_val k, "=", v }.any? or puts_val "(none)"
      puts "block:"
      @block.each_line { |l| puts_val l }
    end

    INDENT = " "*2

    def puts_val *args
      l = [ INDENT, *args].join ""
      puts l
    end

  end


  class Entry

    # Alias the question marks away from all method names because
    # they're a nuisance on the command line.
    alias hidden       hidden?
    alias visible      visible?
    alias broken_link  broken_link?
    alias broken       broken?
    alias dir          dir?
    alias binary       binary?
    alias bin          bin?
    alias vimswap      vimswap?

    def blockdev        ; blockdev?         ; end
    def chardev         ; chardev?          ; end
    def directory       ; directory?        ; end
    def executable      ; executable?       ; end
    def executable_real ; executable_real?  ; end
    def file            ; file?             ; end
    def grpowned        ; grpowned?         ; end
    def owned           ; owned?            ; end
    def pipe            ; pipe?             ; end
    def readable        ; readable?         ; end
    def readable_real   ; readable_real?    ; end
    def setgid          ; setgid?           ; end
    def setuid          ; setuid?           ; end
    def socket          ; socket?           ; end
    def sticky          ; sticky?           ; end
    def symlink         ; symlink?          ; end
    def writable        ; writable?         ; end
    def writable_real   ; writable_real?    ; end
    def zero            ; zero?             ; end

    # convenient digest and time format methods
    alias method_missing_orig method_missing
    def method_missing sym, *args, &block
      case sym.to_s
        when /\Adigest_(.*)/, /\A([a-z]+[0-9]+)\z/ then
          m = $1
          d = begin
            Digest.const_get m.upcase
          rescue NameError
            if m =~ /sha\d\d\d/ then m = "sha2" end
            require "digest/#{m}" and retry
            raise
          end
          e = d.new
          read 0x1000_0000 do |b| e.update b end
          e.hexdigest
        when /\A([amc]time)!\z/ then
          (send $1).strftime "%Y-%m-%d %H:%M:%S %z"
        else
          method_missing_orig sym, *args, &block
      end
    end

  end

end


class Time

  # autoload several formating methods
  def method_missing sym, *args, &block
    if require "time" then
      send sym, *args, &block
    else
      super
    end
  end

  # several common schemes
  def i ; iso8601   ; end
  def x ; xmlschema ; end
  def r ; rfc822    ; end
  def u ; utc.strftime "%Y-%m-%d %H:%M:%S" ; end

end


class Integer
  # convenient formatting, right justification
  def method_missing sym, *args
    case sym.to_s   # .to_s for Ruby 1.8
      when /\Aw(\d+)/  then "%#{$1}d" % self
      when /\Aw_(\d+)/ then to_g.rjust $1.to_i
      else                  super
    end
  end
end

class String
  # convenient formatting, left justification
  def method_missing sym, *args
    case sym.to_s   # .to_s for Ruby 1.8
      when /\Aw_?(\d+)/ then ljust $1.to_i
      else                   super
    end
  end
  # conventient date/time construction
  def time
    Time.parse self
  end
end

class NilClass
  # This makes it very easy to compare the return value of `filesize'.
  def <  oth ; false ; end
  def <= oth ; false ; end
  def >  oth ; false ; end
  def >= oth ; false ; end
  def between? min, max ; false ; end

  def method_missing sym, *args
    case sym.to_s   # .to_s for Ruby 1.8
      when /\Aw_?(\d+)/ then " "*$1.to_i
      else                   super
    end
  end
end

class TrueClass
  def <=> oth
    oth == true ? 0 : oth == false ? 1 : nil
  end
  include Enumerable
end

class FalseClass
  def <=> oth
    oth == false ? 0 : oth == true ? -1 : nil
  end
  include Enumerable
end

class Proc
  def to_s
    "#<%s:0x%08x>" % [ self.class, object_id]
  end
end


RbFind::Application.new.run

